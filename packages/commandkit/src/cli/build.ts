import { build } from 'tsup';
import {
  CompilerPlugin,
  CompilerPluginRuntime,
  fromEsbuildPlugin,
} from '../plugins';
import { loadConfigFile } from '../config/loader';

export interface ApplicationBuildOptions {
  plugins?: CompilerPlugin[];
  esbuildPlugins?: any[];
  isDev?: boolean;
  configPath?: string;
}

export async function buildApplication({
  plugins,
  esbuildPlugins,
  isDev,
  configPath,
}: ApplicationBuildOptions) {
  const config = await loadConfigFile(configPath);
  const pluginRuntime = new CompilerPluginRuntime(plugins || []);
  const esbuildPluginList: any[] = pluginRuntime.isEmpty()
    ? []
    : [pluginRuntime];

  if (esbuildPlugins?.length) {
    esbuildPluginList.push(...esbuildPlugins.map(fromEsbuildPlugin));
  }

  await build({
    esbuildPlugins: esbuildPluginList,
    watch: !!isDev,
    banner: {
      js: !isDev
        ? '/* Optimized production build generated by commandkit */'
        : '',
    },
    cjsInterop: true,
    dts: false,
    clean: true,
    format: ['esm'],
    shims: true,
    keepNames: true,
    minify: false,
    jsxFactory: 'CommandKit.createElement',
    jsxFragment: 'CommandKit.Fragment',
    minifyIdentifiers: false,
    minifySyntax: false,
    silent: !!isDev,
    splitting: true,
    skipNodeModulesBundle: true,
    name: 'CommandKit',
    sourcemap: true,
    target: 'node16',
    outDir: config.distDir,
  });
}
